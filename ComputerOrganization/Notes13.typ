#import "my-styles.typ": *
#show link: it => {
  underline(emph(text(fill: blue, it)))
}

updated: 2025-10-23 \
对应教材5.5.3-5.6

= 第五章：流水线冲突

== 冲突种类

- 结构冒险（Structural Hazard） 
定义：多个指令在同一周期依赖同一个硬件资源，例如：数据总线、运算器。 

例如：\
取指与数据访存共用一个存储器或总线，IF 和 MEM 阶段在同周期冲突。\
只有一个整型乘法器，而同周期有多条需要乘法的指令。 \

解决办法：\
进行流水线功能段划分，让每个部件只能在特定的周期访问一次（例如：设置专门的访存周期，才能访问MEM）。可以避免一部分冲突（IF和MEM冲突无法解决，IF不能调整位置）。 \
设置多个独立的部件来解决冲突。对于寄存器可以将读写口分开，对于存储器IF和MEM冲突，可以把指令和数据存储器分开，例如：现代cpu都引入了cache机制，指令和数据的cache是分离。

- 数据冒险
定义：指令之间存在数据相关关系，后一条指令需要前一条指令产生的结果，但该结果尚未在使用的时候准备好。

例如：\
RAW（Read After Write， 写后读）：后指令要读的操作数是前指令要写的结果，I1: R1 = R2 + R3；I2: R4 = R1 + R5。\
Load-Use冒险：在LW指令加载数据的同时，后面又有R型或者I型指令用数据。

解决办法：\
插入空指令（NOP）：插入整条的空指令。\
指令中插入气泡（Stall）：加载指令后的紧邻使用通常需1拍占位操作，进行停顿。\
转发/旁路（Forwarding/Bypassing）：将执行结果在寄存器回写前直接送到后续阶段使用，减少RAW停顿。 \
编译阶段优化指令顺序。


- 控制冒险（Control Hazard，也称分支冲突/分支冒险）
定义：遇到改变控制流的指令（如分支、跳转、异常、返回），在分支方向或目标地址尚未确定前，流水线不知道应取哪条后续指令。

例如：\
BEQ/JAL指令的条件分支通常在EX或更晚阶段才解析，而后面几条指令的取指已经在流水线上执行。所取的指令可能和实际分支不符。

解决办法：\
采用静态或动态分支预测。 \
编译程序优化指令顺序(分支延迟)。



== 静态分支预测
简单静态的规则，例如：向后跳，就认为一直成立，向前条就认为一直不成立。

== 动态分支预测


== 分支延迟  
将分支预测之前的与分支预测无关的指令移到分支后面，让这些指令先执行，这些指令不管分支跳转如何都需要被执行。

= 第五章：高级流水线

